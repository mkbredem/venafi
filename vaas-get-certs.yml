---
- name: Gather Venafi Cloud applications and certificates
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    # === Required ===
    vaas_api_key: "{{ venafi_api_key }}"   # or inject via AAP credential as a variable
    tenant_base_url: "https://eval-85300634.venafi.cloud" # your tenant base
    global_api_url:  "https://api.venafi.cloud"
    # Many APIs are also available under api.venafi.cloud; most tenants proxy on their base URL too.

    # === Tuning ===
    cert_limit: 1000
    cert_params: "ownershipTree=false&excludeSupersededInstances=false"

    # === Output files ===
    out_dir: "/tmp/venafi_gather"
    apps_json: "{{ out_dir }}/applications.json"
    certs_json: "{{ out_dir }}/certificates.json"

  pre_tasks:
    - name: Ensure output directory exists
      ansible.builtin.file:
        path: "{{ out_dir }}"
        state: directory
        mode: "0755"

    - name: Fail fast if API key missing
      ansible.builtin.assert:
        that:
          - vaas_api_key is defined
          - vaas_api_key | length > 0
        fail_msg: "Set venafi_api_key extra var or inject vaas_api_key from an AAP credential."

  tasks:
    - name: Get Applications (tenant-scoped)
      ansible.builtin.uri:
        url: "{{ tenant_base_url }}/applications"
        method: GET
        headers:
          Accept: "application/json"
          Authorization: "Bearer {{ vaas_api_key }}"
        return_content: true
        status_code: [200]
      register: vaas_apps

    - name: Save Applications JSON
      ansible.builtin.copy:
        dest: "{{ apps_json }}"
        content: "{{ vaas_apps.content }}"
        mode: "0644"

    - name: Normalize apps data
      set_fact:
        apps_list: >-
          {{
            vaas_apps.json['items']
            if (vaas_apps.json is mapping and 'items' in vaas_apps.json)
            else (vaas_apps.json if (vaas_apps.json is sequence) else [])
          }}

    - name: Show basic Applications summary
      ansible.builtin.debug:
        msg:
          - "Applications HTTP {{ vaas_apps.status }}"
          - "Applications count: {{ apps_list | length }}"

    # --- Certificates (Outage Detection API) ---
    # NOTE: This grabs up to 'cert_limit' results. If you have more, see 'Pagination' note below.
    - name: Get Certificates (up to {{ cert_limit }})
      ansible.builtin.uri:
        url: "{{ global_api_url }}/outagedetection/v1/certificates?{{ cert_params }}&limit={{ cert_limit }}"
        method: GET
        headers:
          Accept: "application/json"
          Authorization: "Bearer {{ vaas_api_key }}"
        return_content: true
        status_code: [200]
      register: vaas_certs

    - name: Save Certificates JSON
      ansible.builtin.copy:
        dest: "{{ certs_json }}"
        content: "{{ vaas_certs.content }}"
        mode: "0644"

    - name: Show certificate counts
      ansible.builtin.debug:
        msg:
          - "Certificates HTTP {{ vaas_certs.status }}"
          - "Certificates returned: {{ (vaas_certs.json.certificates | default([])) | length }}"
          - "Next cursor present? {{ 'nextCursor' in (vaas_certs.json | default({})) }}"

    # Optional: show expiring soon (example: <= 30 days). Adjust as you like.
    - name: Compute 'expiring within 30 days' subset (best-effort)
      ansible.builtin.set_fact:
        expiring_soon: >-
          {{
            (vaas_certs.json.certificates | default([]))
            | selectattr('validTo', 'defined')
            | selectattr('validTo', 'search', '.*')    # keep those with a value
            | list
          }}

    - name: Print a few sample certificate rows
      ansible.builtin.debug:
        var: expiring_soon[0:5]

  # --- Notes on Pagination ---
  # Some tenants return more than 'limit' certs and include 'nextCursor' in the response.
  # To paginate, repeat the certificates GET adding '&cursor={{ cursor }}' until 'nextCursor' disappears.
  # You can implement a simple loop with set_fact to accumulate results if needed.